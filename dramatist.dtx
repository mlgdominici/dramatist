% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
dramatist --- typesetting drama with LaTeX
E-mail: mlgdominici@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

dramatist provides support for theatrical texts both in verse and in
prose. The following features are provided: two environments for
typesetting dialogues in prose or in verse; new document divisions
corresponding to acts and scenes; macros that control the typography
of characters and stage directions; and automatical generation of a
list of characters. The package is designed to be highly configurable.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
dramatist --- typesetting drama with LaTeX
E-mail: mlgdominici@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2011-2013 by Massimiliano Dominici <mlgdominici@gmail.com>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Massimiliano Dominici.

This work consists of the file  dramatist.dtx
and the derived files           dramatist.ins,
                                dramatist.pdf,
                                dramatist.sty,
                                modern.dst,
                                classic.dst,
                                centered.dst and
                                dramatist-1.2d.sty
\endpostamble
\usedir{tex/latex/dramatist}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
  \file{modern.dst}{\from{\jobname.dtx}{modern}}
  \file{classic.dst}{\from{\jobname.dtx}{classic}}
  \file{centered.dst}{\from{\jobname.dtx}{centered}}
  \file{\jobname-1.2d.sty}{\from{\jobname.dtx}{compatibility}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/dramatist}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/dramatist}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dramatist}[2014/05/23 v1.99.2. Package for typesetting drama]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{libertine}
\usepackage{inconsolata}
\usepackage{xkvview}
\usepackage{paralist}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\MakeShortVerb{\|}
\newcommand*\clsname{\textsf}
\newcommand*\pkgname{\textsf}
\newcommand*\envname{\textsf}
\newcommand*\optname{\textsf}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{2274}
% \CharacterTable%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_ Grave accent  \`
%       Left brace    \{     Vertical bar  \| Right brace   \}     Tilde
%     \~}
%\GetFileInfo{\jobname.sty}
%
%\title{^^A
%  \textsf{dramatist} --- typesetting drama with \LaTeX\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{^^A
%  Massimiliano Dominici\thanks{E-mail: mlgdominici@gmail.com}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
%\tableofcontents
%
%\section{User guide}
%
%\subsection{Options}
%
%\xkvview{family=dramatist.sty}
%
%\xkvview{family=sections}
%
%\xkvview{family=drama}
%
%\xkvview{family=speaker}
%
%\xkvview{family=character}
%
%\xkvview{family=stage}
%
%\xkvview{family=dramatis}
%
%\StopEventually{^^A
% \PrintChanges
% \PrintIndex
% }
%
%   \section{Implementation}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
% \subsection{Loading auxiliary packages}
% We need to load some auxiliary package in order to simplify our
% job. We load \pkgname{xkeyval}, particularly, to have a nice
% interface for ``key = value'' definitions.
%    \begin{macrocode}
\RequirePackage{xspace}
\RequirePackage{xkeyval}
\RequirePackage{ifmtarg}
\RequirePackage{etoolbox}
\RequirePackage{zref-base}
\RequirePackage{translations}
%    \end{macrocode}
% \subsection{Private tools}
% A series of tools making ``key = value'' definitions simpler follows here.
% 
% \begin{macro}{\DR@define@key}
% This is a general dispatcher for more focused macros. It takes four arguments:
% \begin{enumerate}
% \item An \texttt{id}, dispatching to the needed type of low level
%   definition's macro, borrowed from \pkgname{xkeyval}. Five values
%   are accepted:
%   \begin{description}
%   \item[c] used for commands, calls |\define@cmdkey| via
%     |\DR@define|;
%   \item[l] used for lengths, calls the generic |\define@key| macro,
%     after defining the new length;
%   \item[L] same use, but for lengths which need to be defined
%     globally;
%   \item[b] used for booleans, calls |\define@boolkey|;
%   \item[C] used for restricted choice ``key = value'' macros, calls
%     |\define@choicekey|;
%   \end{description}
% \item the \texttt{family} the key to be defined belongs to;
% \item the \texttt{key} to be defined;
% \item the \texttt{default} value of the key to be defined.   
% \end{enumerate}
%    \begin{macrocode}
\newcommand\DR@define@key[4]{% <id><fam><key><default>
  \ifx#1c%
    \DR@define{command}{#2}{#3}{#4}%
  \else%
    \ifx#1l%
      \DR@define{length}{#2}{#3}{#4}%
    \else%
      \ifx#1b%
        \DR@define{bool}{#2}{#3}{#4}%
      \else%
        \ifx#1L%
          \DR@define{glength}{#2}{#3}{#4}%
        \else%
          \ifx#1C%
%    \end{macrocode}
% (But this rule doesn't match the definition of
% |\DR@define@choicekey| below.
%    \begin{macrocode}
            \DR@define{choice}{#2}{#3}{#4}%
          \fi%
        \fi%
      \fi%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% The following macros do the actual work. |\DR@define| is the actual
% dispatcher, while the |\DR@define@<spec>| macros call the respective
% macros from \pkgname{xkeyval}.
% \begin{macro}{\DR@define}
%    \begin{macrocode}
\newcommand\DR@define[1]{\csname DR@define@#1key\endcsname}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@define@commandkey}
%    \begin{macrocode}
\newcommand\DR@define@commandkey[3]{%
  \define@cmdkey{#1}[DR@#1@]{#2}[#3]{}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@define@lengthkey}
%    \begin{macrocode}
\newcommand\DR@define@lengthkey[3]{%
  \expandafter\newlength\csname DR@#1@#2\endcsname%
  \define@key{#1}{#2}[#3]{%
    \expandafter\setlength\csname DR@#1@#2\endcsname{##1}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@define@glengthkey}
%    \begin{macrocode}
\newcommand\DR@define@glengthkey[3]{%
  \expandafter\newlength\csname DR@#1@#2\endcsname%
  \define@key{#1}{#2}[#3]{%
    \global\expandafter\setlength\csname DR@#1@#2\endcsname{##1}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@define@boolkey}
%    \begin{macrocode}
\newcommand\DR@define@boolkey[3]{%
  \define@boolkey+{#1}[DR@#1@]{#2}[#3]{}{%
    \PackageWarning{dramatist}{Invalid input for key `#2' in family `#1'}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@define@choicekey}
%    \begin{macrocode}
\newcommand\DR@define@choicekey[5]{%
  \define@choicekey+{#1}{#2}[\val\nr]{#3}[#4]{#5}{%
    \PackageWarning{dramatist}{Invalid input for key `#2' in family `#1'}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@setvalues}
%   |\DR@setvalues{<id>}| is called at the beginning of a specific
%   user macro or environment and sets the default values collected
%   both via |\DRresetdefaults| and |\presetkeys| from
%   \pkgname{xkeyval}.
%    \begin{macrocode}
\newcommand\DR@setvalues[1]{%
  \csname setup@#1\endcsname%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Making styles}
% The macros described in this section will be used for changing, in a
% consistent way, the key values from the default ones.
%
% \begin{macro}{\DRSetup}
%   |\DRSetup| makes global changes to the customizable elements of a
%   macro or environment. It appends the new values (collected in
%   |\presetkeys|) to |\setup@<id>|, where |<id>|, supplied through
%   |arg #1|, is the name of the macro or environment to be
%   modified. We must ensure that |\setkeys| will be called in order
%   to have the changes applied. (Should I move this in
%   |\DR@setvalues|, thus reducing calls?)
%    \begin{macrocode}
\newcommand\DRSetup[3]{% <name><fam><spec>
  \expandafter\appto\csname setup@#1\endcsname{%
    \presetkeys{#2}{#3}{}%
    \setkeys{#2}{}%
    }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\NewStyle}
%   This macro will create a new style. We simply construct from |arg #1| 
%   an internal macro which holds the code specified in |arg #2|. Usually 
%   we will have several |\DRSetup| macros in the second argument. (See 
%   section~\ref{sec:styles} for some examples.) |\DRresetdefaults| makes 
%   sure that every previous customization will be overwritten.
%    \begin{macrocode}
\newcommand\NewStyle[2]{% <name><code>
  \expandafter\def\csname DR@style@#1\endcsname{%
    \DRresetdefaults
    #2
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ApplyStyle}
%   |\ApplyStyle{<id>}| calls the code held in |\NewStyle{<id>}| and
%   so it applies a style.
%    \begin{macrocode}
\newcommand\ApplyStyle[1]{%
  \csname DR@style@#1\endcsname
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\LoadStyle}
%   |\LoadStyle{<id>}| loads a file containing a single style with the
%   same name and applies it.
%    \begin{macrocode}
\newcommand\LoadStyle[1]{%
  \makeatletter
  \InputIfFileExists{#1.dst}
    {\PackageInfo{dramatist}{Load `#1' style}}
    {\PackageWarning{dramatist}{File #1.dst not found.}}
    \ApplyStyle{#1}
  \makeatother
}
%    \end{macrocode}
% \end{macro}
% \subsection{Auxiliary macros}
% We need a bunch of new conditionals.
%    \begin{macrocode}
\newif\if@cglist
\newif\if@DRpoemscol
\newif\if@DRverse
\newif\if@DRmemoir
\newif\if@DR@broken@verse
\newif\if@firstdirection
%    \end{macrocode}
% We also need to save the original meaning of |\@roman| and |\roman|
% since \pkgname{spanish.ldf} fiddles with it. (Really?)
%    \begin{macrocode}
\def\DRroman#1{\expandafter\romannumeral\csname c@#1\endcsname}
\def\DR@roman#1{\romannumeral #1}
%    \end{macrocode}
% We will have to deal with different packages implementing the
% numbering of verse lines. So we need an abstraction layer.
%    \begin{macrocode}
\newcommand\DR@linenumberwarning{}
\newcommand\DR@setlinenumber{%
  \setcounter{storelineno}{0}%
  \if@DRpoemscol%
    \setcounter{storeprintlineindex}{0}%
  \else%
    \refstepcounter{storelineno}%
  \fi%
}
%    \end{macrocode}
% An useful length for later use.
%    \begin{macrocode}
\newlength\DR@saved@leftmargin
\setlength\DR@saved@leftmargin{0pt}
%    \end{macrocode}
% Default names for the main document divisions related to drama. We
% use here commands from package \pkgname{translations}.
%    \begin{macrocode}
\def\actname{\GetTranslation{Act}}
\def\scenename{\GetTranslation{Scene}}
\def\drampername{\GetTranslation{Personae}}
\def\curtainname{\GetTranslation{Curtain}}
%    \end{macrocode}
% Some useful counters.
%    \begin{macrocode}
\newcounter{brokenverse}
\setcounter{brokenverse}{0}
\newcounter{storelineno}
\setcounter{storelineno}{0}
\if@DRpoemscol\else\refstepcounter{storelineno}\fi
\newcounter{storeprintlineindex}
\newcounter{character}
%    \end{macrocode}
% \subsection{Options}
% Currently \pkgname{\jobname} offers three package options: different
% line numberings for verse drama, style loading, compatibility with
% old versions.
%    \begin{macrocode}
\def\DR@lnpa{}
\def\DR@lnps{}
\newif\ifDR@compatibility
\define@choicekey+{dramatist.sty}{numbering}[\val\nr]{document,act,scene}{%
  \renewcommand\DR@linenumberwarning{\PackageWarning{dramatist}{\DR@lnpwarning}}
  \ifcase\nr\relax
  \or
    \let\DR@lnpa\DR@setlinenumber
  \or
    \let\DR@lnps\DR@setlinenumber
  \fi
}{\PackageWarning{dramatist}{Invalid input `##1' for option `##2'}}
\define@key{dramatist.sty}{style}[modern]{%
  \def\DR@stylefile{#1}
}
\define@key{dramatist.sty}{compatibility}[1.2d]{%
  \DR@compatibilitytrue
  \def\DR@compat@version{#1}
}
\ExecuteOptionsX{style}
\ProcessOptionsX
\ifDR@compatibility
  \PackageWarningNoLine{dramatist}{You are running in compatibility mode}
  \RequirePackage{dramatist-\DR@compat@version}
\endinput\fi
%    \end{macrocode}
% \subsection{Environments for dialogues}
% We start defining the customizable elements for the dialogues.
%    \begin{macrocode}
\DR@define@key{l}{drama}{leftmargin}{0pt}
\DR@define@key{l}{drama}{rightmargin}{0pt}
\DR@define@key{l}{drama}{speakswidth}{0pt}
\DR@define@key{l}{drama}{speaksindent}{0pt}
\DR@define@key{l}{drama}{speechskip}{0pt}
\DR@define@key{l}{drama}{parindent}{0pt}
\DR@define@key{l}{drama}{topsep}{0pt}
\DR@define@key{l}{drama}{parsep}{0pt}
\DR@define@key{l}{drama}{partopsep}{0pt}
\DR@define@key{l}{drama}{labelsep}{0pt}
\DR@define@key{l}{drama}{bvsep}{0pt}
\DR@define@key{b}{drama}{alignbv}{false}
\define@choicekey+{drama}{speakerlabel}[\val\nr]{centered,long,short,altlong}[short]{%
  \ifcase\nr\relax
    \let\DR@speakerlabel\DR@speakerlabel@centered
  \or
    \let\DR@speakerlabel\DR@speakerlabel@long
  \or
    \let\DR@speakerlabel\DR@speakerlabel@short
  \or
    \let\DR@speakerlabel\DR@speakerlabel@altlong
  \fi  
}{\PackageWarning{dramatist}{Invalid input for key `speakerlabel' in family `drama'}}
\DR@define@key{c}{drama}{font}{}
\DR@define@key{c}{drama}{postitem}{}
\define@cmdkey{drama}[DR@drama@]{largest}{\global\settowidth\DR@drama@largestwidth{\DR@speaker{\DR@drama@largest}}}
\newlength\DR@drama@largestwidth
%    \end{macrocode}
% \begin{macro}{DR@drama@prose}
%   This environment is the internal version of \envname{drama},
%   \emph{i.~e.} the environment for dialogues in prose. So, no need
%   for complex stuff here, only a list with convenient parameters,
%   and an hook for font setting. We also need to initialize
%   |\DR@pidefault| to |\DR@drama@postitem| and warn the user in case
%   he chose to attach numbers to the paragraph lines via the
%   \optname{numbering} option. This task should be performed instead
%   by a dedicated package like \pkgname{lineno}.
%    \begin{macrocode}
\newenvironment{DR@drama@prose}{%
  \@firstdirectiontrue
  \let\DR@pidefault\DR@drama@postitem
  \DR@linenumberwarning%
    \list{}{%
      \leftmargin\DR@drama@leftmargin%
      \rightmargin\DR@drama@rightmargin%
      \labelwidth\DR@drama@speakswidth%
      \itemindent\DR@drama@speaksindent%
      \itemsep\DR@drama@speechskip%
      \listparindent\DR@drama@parindent%
      \parsep\DR@drama@parsep%
      \labelsep\DR@drama@labelsep%
      \topsep\DR@drama@topsep%
      \partopsep\DR@drama@partopsep%
      \setlength\DR@saved@leftmargin{\leftmargin}
    }%
    \DR@drama@font%
    \vspace{-\baselineskip}%
    \item\relax
    }{\endlist}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{drama}
%   The user environment for dialogues in prose. Before calling
%   |DR@drama@prose| we set the global parameters
%   (|\DR@setvalues{drama}|) and, if specified through the optional
%   argument, local ones.
%    \begin{macrocode}
\newenvironment{drama}[1][]{%
  \DR@setvalues{drama}
  \setkeys{drama}{#1}
  \DR@drama@prose}{\endDR@drama@prose}
%    \end{macrocode}
% \end{macro}
% Working with dialogues in verse is more complex, since we don't want
% to provide a dedicated verse environment, rather we want to be able
% to use transparently the environment provided by the class or by a
% dedicated package. So we need to support
% \begin{inparaenum}
% \item the standard class \envname{verse} environment;
% \item the \envname{verse} environment from \pkgname{verse} package
%   or \clsname{memoir} class;
% \item the \envname{poem} environment from \pkgname{poemscol}
%   package.
% \end{inparaenum}
% These are the different \envname{verse} environments I'm aware
% of. Alternative classes contain, usually, a clone of the standard
% \envname{verse} environment.
%
% The user needs not to call the environment himself, the
% \envname{versedrama} environment selects automatically the right
% one.
%
% \begin{macro}{\DR@trivlist}
% Redefining such environments (and keeping them in sync with the
% original) would be a cumbersome burden. Instead, the package
% installs the convenient patches in suitable places. To do so, we
% need to save the original version of |\@trivlist|
%    \begin{macrocode}
\let\DR@trivlist\@trivlist
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@listi}
%   and use a modified version of |\@listi|.
%    \begin{macrocode}
\def\DR@listi{%
  \topsep\DR@drama@topsep%
  \partopsep\DR@drama@partopsep%
  \parsep\DR@drama@parsep%
  \if@DRpoemscol\else%
    \leftmargin\DR@drama@leftmargin%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@appendparameters}
%   The patches are mostly installed through |\DR@appendparameters|
%   and depend by the chosen \envname{verse} environment.
%    \begin{macrocode}
\def\DR@appendparameters{%
  \if@DRpoemscol
    \leftmargin\DR@drama@leftmargin%
    \advance\leftmargin\runoverindentvalue%
    \setcounter{verselinenumber}{\value{storelineno}}%
    \setcounter{printlineindex}{\value{storeprintlineindex}}%
  \fi
  \if@DRverse
    \setcounter{poemline}{\value{storelineno}}%
  \fi
  \rightmargin\DR@drama@rightmargin%
  \labelsep=\DR@drama@labelsep%
  \labelwidth=\DR@drama@speakswidth%
  \itemsep\DR@drama@speechskip%
  \itemindent=\dimexpr\DR@drama@speaksindent+\itemindent\relax%
  \setlength\DR@saved@leftmargin{\leftmargin}
}
\newcommand\DR@vscentercr{%
  \futurelet\DRnext\DR@@vscentercr%
}
\newcommand\DR@@vscentercr{%
  \ifx\DRnext>\stepcounter{brokenverse}\DR@zsavepos{DR@bv:\DRroman{brokenverse}}\fi%
  \DR@orig@vscentercr%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{DR@drama@verse}
%   This is the internal version of the \envname{versedrama}
%   environment. We ensure that patches are loaded and then we start
%   the needed \envname{verse} environment. In the final argument we
%   close said environment and reset suitably the verse number
%   counter.
%    \begin{macrocode}
\newenvironment{DR@drama@verse}{%
  \@firstdirectiontrue
  \let\DR@pidefault\DR@drama@postitem%
  \let\@listi\DR@listi
  \def\@trivlist{\DR@appendparameters\DR@trivlist}
  \if@DRpoemscol
    \begin{poem}
    \ifDR@drama@alignbv
      \let\DR@orig@brokenline\brokenline
      \def\brokenline{%
        \stepcounter{brokenverse}%
        \DR@zsavepos{DR@bv:\DRroman{brokenverse}}%
        \global\@DR@broken@versetrue\DR@orig@brokenline%
      }
    \fi
  \else 
    \if@DRverse 
      \ifDR@drama@alignbv
        \let\DR@orig@vscentercr\@vscentercr%
        \let\@vscentercr\DR@vscentercr%
        \def\newline{\global\@DR@broken@versetrue}%
      \else
        \def\newline{}%
      \fi
      \setlength{\stanzaskip}{\DR@drama@parsep}%
      \if@DRmemoir \setlength{\vleftmargin}{\DR@drama@leftmargin} \fi
    \fi
    \begin{verse}
  \fi
  \DR@drama@font%
  \vspace{-\baselineskip}%
}{%
  \if@DRpoemscol
    \end{poem}
    \setcounter{storelineno}{\value{verselinenumber}}
    \setcounter{storeprintlineindex}{\value{printlineindex}}
    \ifDR@drama@alignbv
      \let\brokenline\DR@orig@brokenline
    \fi
  \else
    \end{verse}
    \if@DRverse
      \ifDR@drama@alignbv
        \let\@vscentercr\DR@orig@vscentercr%
      \fi
      \setcounter{storelineno}{\value{poemline}}
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{versedrama}
%   As for \envname{drama}, \envname{versedrama} is a simple wrapper
%   for its internal version. First we load, of course, the values for
%   each parameter, both global and local ones.
%    \begin{macrocode}
\newenvironment{versedrama}[1][]{%
  \DR@setvalues{versedrama}%
  \setkeys{drama}{#1}%
  \DR@drama@verse}{\endDR@drama@verse}
%    \end{macrocode}
% \end{macro}
% Our environments for the dialogues are, after all, lists; so it's
% convenient to typeset the speaker name and, when possible, an
% initial direction, in the item label. But item labels are not
% flexible enough to be formatted \emph{ad libitum} from
% inside. \emph{E.~g.} long directions spanning multiple lines should
% go outside the item label, but we need them inside when typesetting
% the name of the speaker centered. So we provide four different kind
% of labels.
% \begin{macro}{\DR@speakerlabel@centered}
%    \begin{macrocode}
\newcommand\DR@speakerlabel@centered[2]{%
  \item[\hb@xt@\textwidth{\hss\DR@speaker{#1}\@ifmtarg{#2}{}{#2}\hss}]%
    \DR@drama@postitem\DR@continued@verse%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@speakerlabel@long}
%    \begin{macrocode}
\newcommand\DR@speakerlabel@long[2]{%
  \item[\DR@speaker{#1}]%
    \@ifmtarg{#2}{}{%
      \hskip-\DR@drama@labelsep\hskip 0pt plus 4pt\ #2\hskip\DR@drama@labelsep
    }\DR@drama@postitem
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@speakerlabel@altlong}
%   This is different from previous macro in that \verb+\labelsep+ is
%   not posponed after a potential stage direction. Useful when
%   typesetting characters names flushed left with regard to the
%   longest character name.
%    \begin{macrocode}
\newcommand\DR@speakerlabel@altlong[2]{%
  \item[\DR@speaker{#1}]%
    \@ifmtarg{#2}{}{%
      #2\space%
    }\DR@drama@postitem
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@speakerlabel@short}
%    \begin{macrocode}
\newcommand\DR@speakerlabel@short[2]{%
  \item[\hb@xt@\DR@speaker@labelwidth{\DR@speaker{#1}\@ifmtarg{#2}{}{\ #2}}]%
    \DR@drama@postitem\DR@continued@verse%
}
%    \end{macrocode}
% \end{macro}
% The following code implements automatic alignment for lines broken
% across different characters. We register in the aux file the
% position of the end of the first hemistich, then the position of the
% end of the subsequent character label; finally we compute the
% difference and skip the resulting amount from the end of the
% chraracter label. We might have used the \pkgname{zref-savepos}
% package, but, unfortunately we need to register the distance from
% the (possibly asimmetric) margin rather than the absolute position,
% because the line may break across pages. So the following is an
% adaptation of the aforementioned package. You may need several runs
% before the alignment is correct.
%    \begin{macrocode}
\zref@newlist{DR@savepos}
\zref@newprop*{posx}[0]{%
  \dimexpr\the\pdflastxpos sp-1in+\ifodd\c@page\the\evensidemargin\else\the\oddsidemargin\fi
}
\zref@newprop*{posy}[0]{\the\pdflastypos}
\zref@addprops{DR@savepos}{posx,posy}
\def\zref@DR@savepos{%
  \if@filesw
    \pdfsavepos
  \fi
}
\ZREF@IfDefinable\DR@zsavepos\def{%
  #1{%
    \@bsphack
    \if@filesw
      \zref@DR@savepos
      \zref@labelbylist{#1}{DR@savepos}%
    \fi
    \@esphack
  }%
}
\newcommand*{\DR@zposx}[1]{%
  \zref@extract{#1}{posx}%
}%
\newcommand*{\DR@zposy}[1]{%
  \zref@extract{#1}{posy}%
}%
\let\ZREF@DR@savepos@ok=Y
%    \end{macrocode}
% \begin{macro}{\DR@continued@verse}
%   This is the macro that performs the alignment. The expressions
%   retrieved by |\DR@zposx| are already dimensions, but they don't
%   exist during the first run, so that |\hskip| would not be followed
%   by a legal expression. We use a trick: first we convert the
%   |dimen| to a |number| through |\numexpr|, then we add a final unit
%   of measure (|sp|), thus ensuring that the expression will be
%   always legal.
%    \begin{macrocode}
\newcommand\DR@continued@verse{%
  \ifDR@drama@alignbv
    \if@DR@broken@verse%
      \DR@zsavepos{DR@el:\DRroman{brokenverse}}%
      \hskip\numexpr\DR@zposx{DR@bv:\DRroman{brokenverse}}-%
                    \DR@zposx{DR@el:\DRroman{brokenverse}}\relax sp%
      \hskip\DR@drama@bvsep%
    \fi%
    \global\@DR@broken@versefalse%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Document divisions}
% Again, we start with the customizable parameters.
%    \begin{macrocode}
\DR@define@key{c}{sections}{name}{\DR@current@sectionname}
\DR@define@key{c}{sections}{namefont}{}
\DR@define@key{c}{sections}{namecase}{}
\DR@define@key{c}{sections}{numfont}{\DR@sections@namefont}
\DR@define@key{c}{sections}{numcase}{\DR@sections@namecase}
\DR@define@key{c}{sections}{title}{}
\DR@define@key{c}{sections}{titlefont}{}
\DR@define@key{c}{sections}{titlecase}{}
\DR@define@key{c}{sections}{namenumbersep}{\ }
\DR@define@key{c}{sections}{numbertitlesep}{\endgraf}
\DR@define@key{c}{sections}{level}{\@ifundefined{chapter}{section}{chapter}}
\DR@define@key{c}{sections}{contentsline}{\DR@sections@name\xspace\csname the\DR@counter@sectionname\endcsname}
\DR@define@key{c}{sections}{markline}{\DR@sections@name\xspace\csname the\DR@counter@sectionname\endcsname}
\define@choicekey+{sections}{mark}[\val\nr]{none,left,right,both}[none]{%
  \ifcase\nr\relax
    \let\DR@sections@mark\@gobble
  \or
    \renewcommand\DR@sections@mark[1]{\markboth{##1}{}}
  \or
    \renewcommand\DR@sections@mark[1]{\markright{##1}}
  \or
    \renewcommand\DR@sections@mark[1]{\markboth{##1}{##1}}
  \fi  
}{\PackageWarning{dramatist}{Invalid input for key `mark' in family `sections'}}
\DR@define@key{c}{sections}{pagestyle}{}
\DR@define@key{c}{sections}{pagebreak}{}
\DR@define@key{c}{sections}{justification}{}
\DR@define@key{c}{sections}{counterformat}{\arabic}
\DR@define@key{l}{sections}{beforeskip}{0pt}
\DR@define@key{l}{sections}{afterskip}{0pt}
%    \end{macrocode}
% \begin{macro}{\DR@div@header}
%   This is the generic macro for document headers. Actual headers will
%   be built on top of it.
%    \begin{macrocode}
\newcommand\DR@div@header[1][]{
  {%
    \DR@setvalues{\DR@counter@sectionname}
    \setkeys*{sections}{#1}
    \DR@sections@pagebreak
    \DR@sections@pagestyle
    \DR@sections@before
    \refstepcounter{\DR@counter@sectionname}
    \DR@sections@auxinfo
    \DR@sections@justification
    \DR@sections@printname%
    \DR@sections@namenumbersep%
    \DR@sections@printnumber
    \DR@sections@numbertitlesep
    \DR@sections@printtitle
    \par
    \DR@sections@after
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@before}
%   This is the code to be executed at the beginning of a new
%   header. We make sure that consecutive spaces from other
%   headers/environments collapse gently. But we also have to ensure
%   that headers which start a new page on their own, preserve the
%   space at the beginning. We subtract the |\topskip| length, so that
%   the value of this space is the \emph{actual} length specified in
%   the specs.
%    \begin{macrocode}
\def\DR@sections@before{
  \addvspace{\DR@sections@beforeskip}
  \ifx\DR@sections@pagebreak\@empty
  \else
    \vspace*{\dimexpr\DR@sections@beforeskip-\topskip\relax}
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@auxinfo}
%   Now, the auxiliary infos for table of contents and marks for
%   headings. The content of the toc entry is sent according to the
%   level specified for the header. Default is |chapter/section| for
%   acts and |section/subsection| for scene, depending on wether the
%   command |\chapter| is defined or not.
%
%   Marking is done via a dedicated macro: |\DR@sections@mark|. The
%   user can choose to make it equivalent to |\@gobble| (no marks),
%   |\markright| or |\markboth| (for setting both |\leftmark| and
%   |\rightmark| or |\leftmark| only) through the key setting
%   \verb+mark=none|right|both|left+.
%    \begin{macrocode}
\newcommand\DR@sections@mark{}

\def\DR@sections@auxinfo{
  \addcontentsline{toc}{\DR@sections@level}{\DR@sections@contentsline}
  \DR@sections@mark{\DR@sections@markline}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@printname}
%   The following macros do the actual typesetting of the
%   header. Distinct macros are provided for the different elements of
%   the header: |\DR@sections@printname| is by default equivalent to
%   |\actname| or |\scenename| or |\drampername| or wathever specified
%   when defining a new header (see below).
%    \begin{macrocode}
\def\DR@sections@printname{%
  {\DR@sections@namefont\DR@sections@namecase{\DR@sections@name}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@printnumber}
%   This is the formatting macro for the counter. The name is slightly
%   misleading, since we could have a word (\emph{First},
%   \emph{Second}, etc.) instead of an actual number.
%    \begin{macrocode}
\def\DR@sections@printnumber{%
  {\DR@sections@numfont\csname the\DR@counter@sectionname\endcsname}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@printtitle}
%   An useful macro, should we need a title for our headers.
%    \begin{macrocode}
\def\DR@sections@printtitle{%
  {\DR@sections@titlefont\DR@sections@titlecase{\DR@sections@title}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@sections@after}
%   This is the closing macro of the header. It adds proper space.
%    \begin{macrocode}
\def\DR@sections@after{
  \addvspace{\DR@sections@afterskip}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\SuppressNumber}
%   Not all headers need a counter, we can suppress it using
%   |\SuppressNumber| as value for the key |counterformat|. (Other
%   meaningful values are: |\roman|, |\Roman|, |\alph|, |\Alph|,
%   |\arabic|.)
%    \begin{macrocode}
\let\SuppressNumber\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DefineNewHead}
%   This macro defines new macros for headers. The first argument
%   yields the name for the command and the associated counter. For
%   each type of header a counter is defined and set to 0, its
%   formatting is committed to the generic macro
%   |\DR@sections@counterformat|, whose actual meaning is defined
%   through the key |counterformat|.
%
%   The second argument is the string that will be typeset in the header.
%    \begin{macrocode}
\newcommand\DefineNewHead[2]{%
  \newcounter{#1}
  \expandafter\renewcommand\csname the#1\endcsname{%
    \DR@sections@counterformat{#1}%
  }
  \setcounter{#1}{0}
  \expandafter\newcommand\csname #1\endcsname{%
    \def\DR@counter@sectionname{#1}
    \def\DR@current@sectionname{#2}
    \DR@div@header
  }  
}
%    \end{macrocode}
% \end{macro}
% Finally we define the three default types of headers:
% |\act|\DescribeMacro{\act}, |\scene|\DescribeMacro{\scene}\ and
% |\dramperhead|\DescribeMacro{\dramperhead}. We use generic names
% (macros) in the second argument, so that we are able to change the
% actual string depending on the language in use.
%    \begin{macrocode}
\DefineNewHead{act}{\actname}
\DefineNewHead{scene}{\scenename}
\DefineNewHead{dramperhead}{\drampername}
%    \end{macrocode}
% \subsection{Characters}
% As usual we start defining the customizable elements.
%    \begin{macrocode}
\DR@define@key{c}{character}{dirname}{\DR@character@speakername}
\DR@define@key{c}{character}{speakername}{}
\DR@define@key{c}{character}{role}{\DR@character@speakername}
\DR@define@key{c}{character}{desc}{}
\DR@define@key{c}{character}{actor}{}
\DR@define@key{c}{character}{rdsep}{}
\DR@define@key{c}{character}{dasep}{}
\DR@define@key{c}{character}{speaksadd}{speaks}
\DR@define@key{b}{character}{entry}{true}
\DR@define@key{c}{character}{namefont}{}
\DR@define@key{c}{character}{namecase}{}
\DR@define@key{c}{speaker}{font}{}
\DR@define@key{c}{speaker}{case}{} %% Valori permessi ` ', \MakeLowercase, MakeUppercase
\DR@define@key{c}{speaker}{del}{}
\DR@define@key{c}{speaker}{prelabel}{}
\DR@define@key{c}{speaker}{postlabel}{}
\DR@define@key{L}{speaker}{labelwidth}{\@tempdima}
%    \end{macrocode}
% The following macros insert a blank space at the beginning of a
% verse line broken across two speeches.
%\begin{macro}{\dramaphantom}
%  |\dramaphantom| produces a blank space equivalemt to the length of
%  text contained in the mandatory argument. An optional argument (a
%  length) can be supplied for corrections. (To be suppressed?)
%    \begin{macrocode}
\newcommand\dramaphantom[2][0pt]{%
  \settowidth{\@tempdimb}{#2}%
  \addtolength{\@tempdimb}{\dimexpr-\DR@speaker@labelwidth+\labelwidth-#1\relax}
  \hskip\@tempdimb
}
%    \end{macrocode}
% \end{macro}
%\begin{macro}{\phantomspeaker}
%  |\phantomspeaker| should be used inside |\dramaphantom| when part
%  of the text is a character label. (To be suppressed?)
%    \begin{macrocode}
\newcommand\phantomspeaker[1]{{\DR@speaker{#1}}\hskip-\labelwidth}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@character@label}
%   |\DR@character@label| formats a character name for use inside
%   directions, scene settings and the like.
%    \begin{macrocode}
\newcommand\DR@character@label{%
  \noexpand\DR@setvalues{character}%
  {\noexpand\DR@character@namefont 
    \noexpand\DR@character@namecase{\DR@character@dirname}%
  }\noexpand\xspace
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@speaker}
%   |\DR@speaker| formats a character name for use in introducing
%   speeches.
%    \begin{macrocode}
\newcommand\DR@speaker[1]{%
  \DR@setvalues{speaker}%
  \DR@speaker@prelabel%
  \DR@speaker@font\DR@speaker@case{#1}\DR@speaker@del
  \DR@speaker@postlabel
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@speaker}
%   The internal version of macros introducing a speech. It calls
%   |\DR@speakerlabel|, after having set default values for
%   customizable elements. The optional argument is for directions.
%    \begin{macrocode}
\def\@speaker#1[#2]{%
  \settowidth{\@tempdima}{\DR@speaker{#1}\@ifmtarg{#2}{}{\ #2}}%
  \DR@setvalues{speaker}%
  \DR@speakerlabel{#1}{#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@character}
%   This is the macro for building individual characters macros. It
%   takes two arguments: the |<name>| of the character (\emph{i. e.}
%   what should appear introducing her speeches) and an |<id>|. Taking
%   |<id>| as basis, the macro builds two user commands: |\<id>| will
%   be used inside directions, scene settings and the like;
%   |\<id>speaks| will be used to introduce a speech.
%    \begin{macrocode}
\newcommand\DR@character[2]{%
  \def\DR@character@speakername{#1}
%    \end{macrocode}
% |\global| is needed for CharacterGroup, |\edef| because expansion
% must occur at declaration time.
%    \begin{macrocode}
  \global\expandafter\edef\csname#2\endcsname{%
    \DR@character@label}%
  \global\expandafter\def\csname#2\DR@character@speaksadd\endcsname{%
    \def\DR@drama@postitem{\DR@pidefault}%
    \@ifstar{\def\DR@drama@postitem{}\@ifnextchar[{\@speaker{#1}}{\@speaker{#1}[]}}%
    {\@ifnextchar[{\@speaker{#1}}{\@speaker{#1}[]}}}%
%    \end{macrocode}
% If an entry should be present in the character list, it's built
% here, taking into account wether the character is grouped with other
% ones or not.
%    \begin{macrocode}
  \ifDR@character@entry
    \if@cglist
      \stepcounter{g\DRroman{character}}
      \global\expandafter\edef\csname gpersona\Roman{character}\DRroman{g\DRroman{character}}\endcsname{%
        \DR@dramper@entry}
    \else
      \stepcounter{character}
      \global\expandafter\edef\csname persona\DRroman{character}\endcsname{%
        \DR@dramper@entry}
    \fi
    \global\expandafter\edef\csname#2dpentry\endcsname{%
      \noexpand\item\DR@dramper@entry}
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DeclareCharacter}
%   And this is the user version of |\DR@character|. A ``key = value''
%   interface is provided to set values for each parameter. By default
%   the macro will not build an entry for the character list, but, as
%   soon as the user specifies values for elements belonging to the
%   latter, the behaviour is reversed. |\Character| is an alias for
%   historical reasons.
%    \begin{macrocode}
\newcommand\DeclareCharacter[3][entry=false]{%
  {
    \DR@setvalues{character}
    \setkeys{character}{#1}
    \DR@character{#2}{#3}
  }
}
\let\Character\DeclareCharacter
%    \end{macrocode}
% \end{macro}
% \begin{macro}{CharacterGroup}
%   Characters groups are built as a single entry in the character
%   list. Their definition must be enclosed inside the
%   \envname{CharacterGroup} environment. The mandatory argument is
%   the role's description.
%    \begin{macrocode}
\newenvironment{CharacterGroup}[1]{%
  \@cglisttrue
  \stepcounter{character}
  \newcounter{g\DRroman{character}}
  \grouplist{#1}
}{\@cglistfalse}
\newsavebox{\tbox}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\grouplist}
%   It assembles three blocks: the characters names, a delimiter, and
%   a description of the role. This worked quite well in the first
%   version of dramatist, with a character list scarcely flexible. Now
%   it should be deeply revised.
%    \begin{macrocode}
\newcommand\grouplist[1]{%
    \global\expandafter\def\csname persona\DRroman{character}\endcsname{%
    \settowidth{\DR@dramatis@castwidth}{\DR@dramatis@descfont #1}
    \DR@checkwidth
    \begin{lrbox}{\tbox}
      \begin{minipage}[c]{\DR@dramatis@charwidth}
        \list{}{%
          \itemindent=\z@%
          \leftmargin=\z@% same indentation of outer list
          \itemsep\DR@dramatis@itemsep%
          \parsep\DR@dramatis@parsep}%
        \dogrouplist
        \endlist
      \end{minipage}
    \end{lrbox}
    \parbox{\DR@dramatis@charwidth}{\usebox{\tbox}}%
    \parbox{\DR@dramatis@parenwidth}{$\left.\rule{0pt}{\ht\tbox}\right\}$}
    \parbox{\DR@dramatis@castwidth}{\DR@dramatis@headfont #1\strut}
    \global\setlength{\DR@dramatis@charwidth}{\z@}
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DR@checkwidth}
%   It performs a check on the length of the entry. In case the amount
%   is greater than |\textwidth|, it reduces |\DR@dramatis@castwidth|
%   accordingly. (Is this correct?)
%    \begin{macrocode}
\newcommand\DR@checkwidth{
  \@tempcntb\z@
  \@whilenum\value{g\DR@roman{\@tempcnta}}>\@tempcntb\do{%
    \advance\@tempcntb\@ne
    \settowidth{\@tempdima}{\@nameuse{gpersona\@Roman{\@tempcnta}\DR@roman{\@tempcntb}}}%
    \ifdim\@tempdima>\DR@dramatis@charwidth%
      \global\setlength{\DR@dramatis@charwidth}{\@tempdima}%
    \fi%
  }
  \@tempdima=\dimexpr\DR@dramatis@charwidth+\DR@dramatis@parenwidth+\DR@dramatis@castwidth+%
    \DR@dramatis@leftmargin+\DR@dramatis@rightmargin+5pt\relax
  \ifdim\@tempdima>\dimexpr\textwidth% why?
    \PackageWarning{dramatist}{\DR@checkcgwwarning}
    \DR@dramatis@castwidth=\dimexpr\textwidth-\DR@dramatis@parenwidth-\DR@dramatis@charwidth-%
      \DR@dramatis@rightmargin-\DR@dramatis@leftmargin-5pt\relax
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\dogrouplist}
%   It builds the internal list of characters inside a group.
%    \begin{macrocode}
\newcommand{\dogrouplist}{%
  \@tempcntb\z@
  \@whilenum\value{g\DR@roman{\@tempcnta}}>\@tempcntb\do{%
    \advance\@tempcntb\@ne
    \item\@nameuse{gpersona\@Roman{\@tempcnta}\DR@roman{\@tempcntb}}\strut%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\speaker}
%   |\speaker| is a generic macro to be used for cases in which we
%   don't need to be consistent (a speaker speaking once and not
%   present in directions or in the character list) or we need to
%   deviate from uniformity (a speaker called once with a different
%   name, two speakers speaking at once).
%    \begin{macrocode}
\newcommand*\speaker{%
  \def\DR@drama@postitem{\DR@pidefault}%
  \@ifstar{\def\DR@drama@postitem{}\@xspeaker}{\@xspeaker}%
}
%    \end{macrocode}
% But frankly speaking, I don't remember why I would need a starred
% version that sets |\DR@drama@postitem| to the empty value.
%    \begin{macrocode}
\newcommand*\@xspeaker[2][]{%
  \@speaker{#2}[#1]%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\character}
%   This is the same than |\speaker|, but for directions and the like.
%    \begin{macrocode}
\newcommand*\character[1]{%
  \DR@setvalues{character}%
  {\DR@character@namefont\DR@character@namecase{#1}}\xspace%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Dramatis personae}
% Here are the definitions of the customizable elements.
%    \begin{macrocode}
\DR@define@key{l}{dramatis}{leftmargin}{0pt}
\DR@define@key{l}{dramatis}{rightmargin}{0pt}
\DR@define@key{l}{dramatis}{indent}{0pt}
\DR@define@key{l}{dramatis}{itemsep}{0pt}
\DR@define@key{l}{dramatis}{topsep}{0pt}
\DR@define@key{l}{dramatis}{parsep}{0pt}
\DR@define@key{l}{dramatis}{partopsep}{0pt}
\DR@define@key{l}{dramatis}{charwidth}{0pt}
\DR@define@key{l}{dramatis}{castwidth}{0pt}
\DR@define@key{l}{dramatis}{parenwidth}{15pt}
\DR@define@key{c}{dramatis}{rolecase}{}
\DR@define@key{c}{dramatis}{rolefont}{}
\DR@define@key{c}{dramatis}{descfont}{}
\DR@define@key{c}{dramatis}{actorfont}{}
\DR@define@key{b}{dramatis}{empty}{true}
%    \end{macrocode}
% \begin{macro}{\DR@dramper@entry}
%   This is how an entry in the automated character list is typeset.
%    \begin{macrocode}
\newcommand\DR@dramper@entry{%
  {\noexpand\DR@dramatis@rolefont\noexpand\DR@dramatis@rolecase{\DR@character@role}}%
  \ifx\DR@character@desc\relax\else\DR@character@rdsep\fi%
  {\noexpand\DR@dramatis@descfont\DR@character@desc}%
  \DR@character@dasep%
  {\noexpand\DR@dramatis@actorfont\DR@character@actor}}
%    \end{macrocode}
% \end{macro}
% The same remarks made for document divisions hold here.
% \begin{macro}{\DramPer}
%   This is the user command for typesetting an automated list of
%   characters, complete with its header. Internally it calls
%   |\dramperhead|, |\DR@begin@dramperlist|, |\dodramperlist| e
%   |\DR@end@dramperlist|, after setting the correct parameters for
%   both the header and the list of characters.
%    \begin{macrocode}
\newcommand{\DramPer}[1][]{%
  \DR@setvalues{dramatis}%
  \setkeys*{dramatis}{#1}
  \dramperhead%[#1]
  \DR@begin@dramperlist\dodramperlist\DR@end@dramperlist
}
%    \end{macrocode}
% \end{macro}
% We start a list, pass the correct parameters
% (|\DR@begin@dramperlist|\DescribeMacro{\DR@begin@dramperlist}) and
% then close the list
% (|\DR@end@dramperlist|\DescribeMacro{\DR@end@dramperlist}).
%    \begin{macrocode}
\newcommand\DR@begin@dramperlist{
  \begin{list}{}{%
    \leftmargin\DR@dramatis@leftmargin%
    \rightmargin\DR@dramatis@rightmargin%
    \topsep\DR@dramatis@topsep%
    \partopsep\DR@dramatis@partopsep%
    \itemsep\DR@dramatis@itemsep%
    \parsep\DR@dramatis@parsep%
    \itemindent\DR@dramatis@indent%
    }
}
\newcommand\DR@end@dramperlist{%
  \end{list}
  \ifDR@dramatis@empty
    \global\setcounter{character}{0}
  \fi
}
%    \end{macrocode}
% \begin{macro}{\dodramperlist}
%   A simple loop that typesets all the entries.
%    \begin{macrocode}
\newcommand{\dodramperlist}{%
  \@tempcnta\z@
  \@whilenum\c@character >\@tempcnta\do{%
    \advance\@tempcnta\@ne
  \item\@nameuse{persona\DR@roman{\@tempcnta}}\strut%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{dramper}
%   Free form list of characters. Unlike |\DramPer|, it does not start
%   a new page, nor makes an entry for the table of contents. And no
%   header, too. The user is on her own, here.
%    \begin{macrocode}
\newenvironment{dramper}[1][]{%
  \DR@setvalues{dramatis}%
  \setkeys*{dramatis}{#1}
  \DR@begin@dramperlist}{\DR@end@dramperlist}
%    \end{macrocode}
% \end{macro}
% The following macros should be used inside a |dramper| environment.
% \begin{macro}{\dramperentry}
%   Free form entry in the list of characters. 
%    \begin{macrocode}
\newcommand\dramperentry[1]{\item #1}
%    \end{macrocode}
% \end{macro}
% The following macros should be used inside |\dramperentry|.
% \begin{macro}{\roleentry}
%   This macro typesets the name of the character (role) following the
%   formatting instructions of the current style.
%    \begin{macrocode}
\newcommand\roleentry[1]{{\DR@dramatis@rolefont\DR@dramatis@rolecase{#1}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\rdsep}
%   This macro typesets the separation between the role and its description.
%    \begin{macrocode}
\newcommand\rdsep{\DR@setvalues{character}\DR@character@rdsep}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\descentry}
%   This macro typesets the name of the description of the role
%   following the formatting instructions of the current style.
%    \begin{macrocode}
\newcommand\descentry[1]{{\DR@dramatis@descfont #1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\dasep}
%   This macro typesets the separation between description (if
%   present) and actor's name.
%    \begin{macrocode}
\newcommand\dasep{\DR@setvalues{character}\DR@character@dasep}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\actorentry}
%   This macro typesets the name of the actor playing the role
%   following the formatting instructions of the current style.
%    \begin{macrocode}
\newcommand\actorentry[1]{{\DR@dramatis@actorfont #1}}
%    \end{macrocode}
% \end{macro}
% \subsection{Stage}
% As usual: definitions of customizable elements.
%    \begin{macrocode}
\DR@define@key{l}{stage}{leftmargin}{0pt}
\DR@define@key{l}{stage}{rightmargin}{0pt}
\DR@define@key{l}{stage}{topsep}{0pt}
\DR@define@key{l}{stage}{partopsep}{0pt}
\DR@define@key{l}{stage}{parsep}{0pt}
\DR@define@key{l}{stage}{itemsep}{0pt}
\DR@define@key{l}{stage}{indent}{0pt}
\DR@define@key{c}{stage}{font}{}
\DR@define@key{c}{stage}{justification}{}
\DR@define@key{c}{stage}{rightdelimiter}{}
\DR@define@key{c}{stage}{leftdelimiter}{}
\DR@define@key{c}{stage}{prehook}{}
\DR@define@key{c}{stage}{posthook}{}
%    \end{macrocode}
% \begin{macro}{DR@stage@display}
%   This is the environment used internally to build display stage
%   directions. It's a list environment as almost everything, here.
%    \begin{macrocode}
\newenvironment{DR@stage@display}{%
  \DR@stage@prehook
  \let\@trivlist\DR@trivlist
  \list{}{%
    \leftmargin\dimexpr-\DR@saved@leftmargin+\DR@stage@leftmargin\relax%
    \rightmargin\DR@stage@rightmargin%
    \topsep\DR@stage@topsep%
    \partopsep\DR@stage@partopsep%
    \parsep\DR@stage@parsep%
    \itemsep\DR@stage@itemsep%
    \labelwidth\z@%
    \labelsep\z@%
    \itemindent\DR@stage@indent%
  }
  \DR@stage@justification%
  \DR@stage@font%
  \item[]
  \DR@stage@leftdelimiter}{%
  \DR@stage@rightdelimiter%
  \endlist
  \DR@stage@posthook
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{DR@stage@inline}
%   This is the environment used internally to build inline stage
%   directions. Very simple, indeed.
%    \begin{macrocode}
\newcommand\DR@stage@inline[1]{%
  \DR@stage@prehook%
  \DR@stage@leftdelimiter{\DR@stage@font#1}\DR@stage@rightdelimiter%
  \DR@stage@posthook%
}
%    \end{macrocode}
% \end{macro}
% And now, the user environments and macros, starting with:
% \begin{macro}{Settings}
%   For scene settings. Display.
%    \begin{macrocode}
\newenvironment{Settings}[1][]{%
    \DR@setvalues{settings}
    \setkeys{stage}{#1}
    \DR@stage@display
  }{%
    \endDR@stage@display
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\settings}
%   Its macro counterpart, convenient when the description is short.
%    \begin{macrocode}
\newcommand\settings[2][]{%
  {
    \DR@setvalues{settings}
    \setkeys{stage}{#1}
    \DR@stage@display#2
    \endDR@stage@display
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\set}
%   A general description of the location, to be put before the play
%   starts. Display.
%    \begin{macrocode}
\newcommand\set[2][]{%
  {
    \DR@setvalues{set}
    \setkeys{stage}{#1}
    \DR@stage@display#2
    \endDR@stage@display
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\direction}
%   A long description inside dialogues. Display.
%    \begin{macrocode}
\newcommand\direction[2][]{%
  {%
    \DR@setvalues{direction}
    \setkeys{stage}{#1}
    \if@firstdirection
      \vspace{-\DR@stage@topsep}%
      \hspace{\DR@saved@leftmargin}%
    \fi
    \goodbreak
    \DR@stage@display#2\nobreak%
    \endDR@stage@display
    \global\@firstdirectionfalse
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\curtain}
%   At the and of an act (display).
%    \begin{macrocode}
\newcommand\curtain{%
  {
    \DR@setvalues{settings}
    \setkeys{stage}{font=\scshape,justification=\centering}
    \DR@stage@display
    \curtainname
    \endDR@stage@display
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\delivery}
%   Short notes inside a single speech. Inline (the only one so far).
%    \begin{macrocode}
\newcommand\delivery[2][]{%
  {%
    \DR@setvalues{delivery}%
    \setkeys{stage}{#1}%
    \DR@stage@inline{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Localization}
% Keys for localization.
%    \begin{macrocode}
\DR@define@key{c}{language}{act}{\GetTranslationFor{fallback}{Act}}
\DR@define@key{c}{language}{scene}{\GetTranslationFor{fallback}{Scene}}
\DR@define@key{c}{language}{personae}{\GetTranslationFor{fallback}{Personae}}
\DR@define@key{c}{language}{curtain}{\GetTranslationFor{fallback}{Curtain}}
%    \end{macrocode}
% We define `captions' for five languages.
%    \begin{macrocode}
\DeclareTranslationFallback{Act}{Act}
\DeclareTranslationFallback{Scene}{Scene}
\DeclareTranslationFallback{Personae}{Dramatis Person\ae}
\DeclareTranslationFallback{Curtain}{Curtain}
\DeclareTranslation{Italian}{Act}{Atto}
\DeclareTranslation{Spanish}{Act}{Acto}
\DeclareTranslation{English}{Act}{Act}
\DeclareTranslation{French} {Act}{Acte}
\DeclareTranslation{German} {Act}{Akt}
\DeclareTranslation{English}{Scene}{Scene}
\DeclareTranslation{French} {Scene}{Sc\`ene}
\DeclareTranslation{German} {Scene}{Szene}
\DeclareTranslation{Italian}{Scene}{Scena}
\DeclareTranslation{Spanish}{Scene}{Escena}
\DeclareTranslation{English}{Personae}{Dramatis Person\ae}
\DeclareTranslation{French} {Personae}{Personnages}
\DeclareTranslation{German} {Personae}{Personen}
\DeclareTranslation{Italian}{Personae}{Personaggi}
\DeclareTranslation{Spanish}{Personae}{Personajes}
\DeclareTranslation{Italian}{Curtain}{Sipario}
\DeclareTranslation{Spanish}{Curtain}{Tel\'on}
\DeclareTranslation{English}{Curtain}{Curtain}
\DeclareTranslation{French} {Curtain}{Rideau}
\DeclareTranslation{German} {Curtain}{Vorhang}
%    \end{macrocode}
% \begin{macro}{\DRSetupLanguage}
% A key-value interface for translations.
%    \begin{macrocode}
\newcommand\DRSetupLanguage[2]{%
  \setkeys{language}{#2}
  \DeclareTranslation{#1}{Act}{\DR@language@act}
  \DeclareTranslation{#1}{Scene}{\DR@language@scene}
  \DeclareTranslation{#1}{Personae}{\DR@language@personae}
  \DeclareTranslation{#1}{Curtain}{\DR@language@curtain}
}
%    \end{macrocode}
% \end{macro}
% \subsection{Default settings}
% These are mostly dummy defaults. Most values will be overwritten by
% the chosen style. Default one is \optname{modern}.
%    \begin{macrocode}
\newcommand\DR@setdefaults[2]{%
  \expandafter\def\csname DR@#1@defaults\endcsname{\presetkeys{#1}{#2}{}\setkeys{#1}{}}
}
\DR@setdefaults{drama}{
  leftmargin,
  rightmargin,
  speakswidth,
  speaksindent,
  speechskip,
  parsep,
  labelsep,
  bvsep,
  alignbv,
  speakerlabel,
  font,
  postitem,
}
\DR@setdefaults{sections}{
  name,
  namecase,
  namefont,
  namenumbersep,
  numcase,
  numfont,
  numbertitlesep,
  title,
  titlecase,
  titlefont,
  counterformat,
  level,
  contentsline,
  markline,
  mark,
  pagebreak,
  pagestyle,
  justification,
  beforeskip,
  afterskip,
}
\DR@setdefaults{character}{
  dirname,
  speakername,
  role,
  desc,
  actor,
  rdsep,
  dasep,
  speaksadd,
  entry,
  namefont,
  namecase,
}
\DR@setdefaults{speaker}{
  font,
  case,
  del,
  prelabel,
  postlabel,
  labelwidth,
}
\DR@setdefaults{dramatis}{
  leftmargin,
  rightmargin,
  indent,
  itemsep,
  topsep,
  parsep,
  partopsep,
  charwidth,
  castwidth,
  parenwidth,
  rolecase,
  rolefont,
  descfont,
  actorfont,
  empty,
}
\DR@setdefaults{stage}{
  leftmargin,
  rightmargin,
  topsep,
  partopsep,
  parsep,
  itemsep,
  indent,
  font,
  justification,
  rightdelimiter,
  leftdelimiter,
  prehook,
  posthook,
}
\DR@setdefaults{language}{
  act,
  scene,
  personae,
  curtain
}
\newcommand\DRresetdefaults{%
  \def\setup@drama{\DR@drama@defaults}
  \def\setup@versedrama{\DR@drama@defaults}
  \def\setup@act{\DR@sections@defaults}
  \def\setup@scene{\DR@sections@defaults}
  \def\setup@dramperhead{\DR@sections@defaults}
  \def\setup@character{\DR@character@defaults}
  \def\setup@speaker{\DR@speaker@defaults}
  \def\setup@dramatis{\DR@dramatis@defaults}
  \def\setup@set{\DR@stage@defaults}
  \def\setup@settings{\DR@stage@defaults}
  \def\setup@direction{\DR@stage@defaults}
  \def\setup@delivery{\DR@stage@defaults}
}
\DR@drama@defaults
\DR@sections@defaults
\DR@character@defaults
\DR@speaker@defaults
\DR@dramatis@defaults
\DR@stage@defaults
\DR@language@defaults
%    \end{macrocode}
% The chosen style is loaded at the end of the package in order to
% ensure that (dummy) defaults will be overwritten.
%    \begin{macrocode}
\AtEndOfPackage{
  \InputIfFileExists{\DR@stylefile.dst}
    {\PackageInfo{dramatist}{Load `\DR@stylefile' style}}
    {\def\DR@stylefile{modern}\input{\DR@stylefile.dst}
      \PackageWarning{dramatist}{File \DR@stylefile.dst not found. Load default `modern' style}}
  \ApplyStyle{\DR@stylefile}
}
%    \end{macrocode}
% Finally, at the beginning of the document we check which
% \envname{verse} environment we ought to deal with and activate
% values for each key.
%    \begin{macrocode}
\AtBeginDocument{
  \@ifclassloaded{memoir}{\@DRmemoirtrue\@DRversetrue}{\@DRmemoirfalse}
  \@ifpackageloaded{poemscol}{\@DRpoemscoltrue}{\@DRpoemscolfalse}
  \@ifpackageloaded{verse}{\@DRversetrue}{\@DRversefalse}
}
%    \end{macrocode}
% \subsection{Errors and Warnings}
%    \begin{macrocode}
\newcommand\DR@lnpwarning{The option `numbering' is meaningless outside the%
                            `versedrama' environment}
\newcommand\DR@checkcgwwarning{Dimension too large}
\newcommand\DR@inputfilewarning{\PackageWarningNoLine{dramatist}{^^J^^J%
********************************************************^^J%
* No Configuration file found, using default settings. *^^J%
********************************************************^^J%
}}
\newcommand\DR@foundfile{\PackageWarningNoLine{dramatist}{^^J^^J%
*******************************************^^J%
* Using Configuration file dramatist.cfg. *^^J%
*******************************************^^J%
}}
\InputIfFileExists{dramatist.cfg}{\DR@foundfile}{\DR@inputfilewarning}
%    \end{macrocode}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
% \subsection{Ready-made styles}\label{sec:styles}
% \subsubsection{Modern style}\label{sec:modern}
%    \begin{macrocode}
%<*modern>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesFile{modern.dst}
                [2014/05/23 v1.99.2. `modern' style for `dramatist' package]
\NewStyle{modern}{%
  \DRSetup{drama}{drama}{
    leftmargin=1.5em,
    speakswidth=\dimexpr\DR@drama@leftmargin-\DR@drama@labelsep\relax,
    speechskip=0pt,
    parsep=0pt,
    parindent=1em,
    speaksindent=0pt,
    labelsep=1em,
    speakerlabel=short,
    postitem=\hskip 0pt plus 4pt minus 4pt,
  }
  \DRSetup{versedrama}{drama}{
    leftmargin=1.5em,
    speakswidth=\dimexpr\DR@drama@leftmargin-\DR@drama@labelsep\relax,
    speaksindent=0pt,
    speechskip=0pt,
    parsep=0pt,
    labelsep=1em,
    speakerlabel=short,
    postitem=\hskip 0pt plus 4pt minus 4pt,
  }
  \DRSetup{act}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=both,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{scene}{sections}{
    namecase=\MakeUppercase,
    namefont=\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{subsection}{section},
    mark=right,
    beforeskip=2\baselineskip,
    afterskip=\baselineskip
  }
  \DRSetup{dramperhead}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\SuppressNumber,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=none,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{character}{character}{
    rdsep={,\ },
    dasep=\hfill,
    namefont=\normalfont\scshape,
    namecase=\MakeLowercase,
  }  
  \DRSetup{speaker}{speaker}{
    font=\scshape,
    case=\MakeLowercase,
  }
  \DRSetup{dramatis}{dramatis}{
    leftmargin=1.5em,
    indent=-\DR@dramatis@leftmargin,
    topsep=2\baselineskip,
    rolecase=\MakeLowercase,
    rolefont=\scshape,
  }
  \DRSetup{set}{stage}{
    topsep=\baselineskip,
    font=\itshape,
    justification=\centering,
  }  
  \DRSetup{settings}{stage}{
    topsep=\baselineskip,
    font=\itshape,
  }  
  \DRSetup{direction}{stage}{
    leftmargin=1.5em,
    topsep=\baselineskip,
    partopsep=0pt,
    font=\itshape,
  }  
  \DRSetup{delivery}{stage}{
    font=\itshape,
    leftdelimiter=(,
    rightdelimiter=),
  }  
}
%    \end{macrocode}
%    \begin{macrocode}
%</modern>
%    \end{macrocode}
% \subsubsection{Classic style}\label{sec:classic}
%    \begin{macrocode}
%<*classic>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesFile{classic.dst}
                [2014/05/23 v1.99.2. `classic' style for `dramatist' package]
\NewStyle{classic}{%
  \DRSetup{drama}{drama}{
    speakerlabel=short,
    leftmargin=0pt,
    speaksindent=1em,
    labelsep=.5em,
    speakswidth=\dimexpr\DR@drama@leftmargin-\DR@drama@labelsep\relax,
    speechskip=0pt,
    parindent=1em,
    parsep=0pt,
    postitem=\hskip 0pt plus 4pt minus 4pt,
  }
  \DRSetup{versedrama}{drama}{
    speakerlabel=short,
    leftmargin=0pt,
    speaksindent=1em,
    labelsep=.5em,
    speakswidth=\dimexpr\DR@drama@leftmargin-\DR@drama@labelsep\relax,
    speechskip=0pt,
    parsep=0pt,
    postitem=\hskip 0pt plus 4pt minus 4pt,
  }
  \DRSetup{act}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=both,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{scene}{sections}{
    namecase=\MakeUppercase,
    namefont=\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{subsection}{section},
    mark=right,
    beforeskip=2\baselineskip,
    afterskip=\baselineskip
  }
  \DRSetup{dramperhead}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\SuppressNumber,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=none,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{character}{character}{
    dirname=\DR@character@role,
    rdsep={,\ },
    dasep=\hfill,
    namefont=\normalfont\scshape,
  }  
  \DRSetup{speaker}{speaker}{
    case=,
    font=\itshape,
    del=.
  }
  \DRSetup{dramatis}{dramatis}{
    rolefont=\scshape,
    leftmargin=0pt,
    indent=-\DR@dramatis@leftmargin,
    topsep=2\baselineskip,
  }
  \DRSetup{set}{stage}{
    topsep=\baselineskip,
    font=\itshape,
    justification=\centering,
  }  
  \DRSetup{settings}{stage}{
    font=\itshape,
    justification=\centering,
    topsep=\baselineskip,
  }  
  \DRSetup{direction}{stage}{
    font=\itshape,
    topsep=\baselineskip,
    partopsep=0pt,
    justification=\centering,
  }  
  \DRSetup{delivery}{stage}{
    font=\itshape,
    leftdelimiter=[,
    rightdelimiter=],
  }  
}
%    \end{macrocode}
%    \begin{macrocode}
%</classic>
%    \end{macrocode}
% \subsubsection{Centered style}\label{sec:centered}
%    \begin{macrocode}
%<*centered>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesFile{centered.dst}
                [2014/05/23 v1.99.2. `centered' style for `dramatist' package]
\NewStyle{centered}{%
  \DRSetup{drama}{drama}{
    speakerlabel=centered,
    leftmargin=0pt,
    speaksindent=0pt,
    labelsep=0pt,
    speechskip={.75\baselineskip plus 4pt minus 2pt},
    parsep=0pt,
    parindent=1em,
    postitem=\leavevmode\vadjust{\nobreak}\vskip.25\baselineskip\noindent\ignorespaces,
  }
  \DRSetup{versedrama}{drama}{
    speakerlabel=centered,
    leftmargin=0pt,
    speaksindent=0pt,
    labelsep=0pt,
    speechskip={.75\baselineskip plus 4pt minus 2pt},
    parsep=0pt,
    postitem=\leavevmode\vadjust{\nobreak}\vskip.25\baselineskip,
  }
  \DRSetup{act}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=both,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{scene}{sections}{
    namecase=\MakeUppercase,
    namefont=\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\Roman,
    level=\@ifundefined{chapter}{subsection}{section},
    mark=right,
    beforeskip=2\baselineskip,
    afterskip=\baselineskip
  }
  \DRSetup{dramperhead}{sections}{
    namecase=\MakeUppercase,
    namefont=\large\scshape,
    titlefont=\scshape,
    justification=\centering,
    counterformat=\SuppressNumber,
    level=\@ifundefined{chapter}{section}{chapter},
    mark=none,
    pagebreak=\cleardoublepage,
    pagestyle=\thispagestyle{empty},
    beforeskip=\baselineskip,
    afterskip=2\baselineskip,
  }
  \DRSetup{character}{character}{
    dirname=\DR@character@role,
    rdsep={,\ },
    dasep=\hfill,
    namefont=\normalfont\scshape,
    namecase=\MakeLowercase,
  }  
  \DRSetup{speaker}{speaker}{
    case=\MakeLowercase,
    font=\scshape,
    labelwidth=0pt,
  }
  \DRSetup{dramatis}{dramatis}{
    rolefont=\scshape,
    leftmargin=0pt,
    indent=-\DR@dramatis@leftmargin,
    topsep=2\baselineskip,
  }
  \DRSetup{set}{stage}{
    topsep=\baselineskip,
    font=\itshape,
    justification=\centering,
  }  
  \DRSetup{settings}{stage}{
    font=\itshape,
    justification=\centering,
  }  
  \DRSetup{direction}{stage}{
    font=\itshape,
    topsep=\baselineskip,
    partopsep=0pt,
    justification=\centering,
    leftdelimiter=(,
    rightdelimiter=),
  }  
  \DRSetup{delivery}{stage}{
    font=\itshape,
    leftdelimiter=,
    rightdelimiter=,
  }  
}
%    \end{macrocode}
%    \begin{macrocode}
%</centered>
%    \end{macrocode}
%    \begin{macrocode}
%<package|modern|classic|centered>\endinput
%    \end{macrocode}
% \subsection{Compatibility with old versions}\label{sec:compatibility}
% 
% When option \optname{compatibility} is activated, the package loads
% \pkgname{dramatist-1.2d} and then exits. A warning is issued.
%    \begin{macrocode}
%<*compatibility>
\ProvidesPackage{dramatist-1.2d}
                [2005/12/01 v1.2d Package for typesetting drama -- Author: Massimiliano Dominici]
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xspace}
\@ifundefined{if@openright}{\newif\if@openright}{}
\newif\if@drverse
\newif\if@poemscol
\@ifpackageloaded{poemscol}{\@poemscoltrue}{\@poemscolfalse}
\newif\if@stagedir
\newif\if@lnpa
\newif\if@lnps
\newif\if@lnpd
\DeclareOption{lnpa}{\@lnpatrue}
\DeclareOption{lnps}{\@lnpstrue}
\ProcessOptions
\newcounter{storelineno}
\setcounter{storelineno}{0}
\if@poemscol\else
\refstepcounter{storelineno}\fi
\newcounter{storeprintlineindex}
\newcounter{character}
\newcounter{temp}
\newcounter{gtemp}
\newcounter{act}
\newcounter{scene}[act]
\renewcommand{\theact}{\roman{act}}
\renewcommand{\thescene}{\roman{scene}}
\newenvironment{drama}{%
    \if@lnpa
    \PackageWarning{dramatist}{\lnpwarning{a}}
    \fi
    \if@lnps
    \PackageWarning{dramatist}{\lnpwarning{s}}
    \fi
    \list{}{%
        \labelwidth\speakswidth
        \itemindent\speaksindent
        \itemsep\speechskip
        \parsep\Dparsep
        \labelsep\Dlabelsep
        \let\makelabel\speakslabel}
    } {\endlist}
\@namedef{drama*}{%
    \@drversetrue
    \if@poemscol
        \begin{poem}
        \setcounter{verselinenumber}{\value{storelineno}}
        \setcounter{printlineindex}{\value{storeprintlineindex}}
    \else
        \begin{verse}
    \fi
    \ifx\poemlines\@undefined\else
        \setcounter{poemline}{\value{storelineno}}
    \fi}
\@namedef{enddrama*}{%
    \ifx\poemlines\@undefined\else
        \setcounter{storelineno}{\value{poemline}}
    \fi
    \if@poemscol
        \end{poem}
        \setcounter{storelineno}{\value{verselinenumber}}
        \setcounter{storeprintlineindex}{\value{printlineindex}}
    \else
        \end{verse}
    \fi
    \@drversefalse}
\providecommand\phantomsection{}
\newcommand\actmark[1]{}
\newcommand\scenemark[1]{}
\newcommand\drampermark[1]{}
\newcommand\@openact{%
    \@ifundefined{if@openright}{\clearpage}{%
        \if@openright
            \clearpage{\thispagestyle{empty}\cleardoublepage}
        \else
            \clearpage
        \fi}
    \thispagestyle{plain}
    \refstepcounter{act}
    \if@lnpa
        \setcounter{storelineno}{0}
        \if@poemscol
            \setcounter{storeprintlineindex}{0}
        \else
            \refstepcounter{storelineno}
        \fi
    \fi
}
\newcommand\act{%
    \@openact
    \secdef\@act\@sact}
\newcommand\@act[1][]{%
    \phantomsection
    \addcontentsline{toc}{chapter}{\actname\ \theact}
    \actmark{\actname\ \theact}
    \m@ke@cthead{#1}
    \@afterindentfalse
    \@afterheading}
\newcommand\@sact[1][]{%
    \m@ke@cthead{#1}
    \@afterindentfalse
    \@afterheading}
\newcommand\Act{%
    \@openact
    \secdef\@Act\@sact}
\def\@Act[#1]#2{%
    \phantomsection
    \ifnum\c@secnumdepth>\m@ne
        \addcontentsline{toc}{chapter}{\actname\ \theact\ #1}
    \else
        \addcontentsline{toc}{chapter}{#1}
    \fi
    \actmark{\actname\ \theact\ #1}
    \m@ke@cthead{#2}
    \@afterindentfalse
    \@afterheading}
\newcommand\m@ke@cthead[1]{%
    \actheadstart
    {\parindent \z@
    \ifnum\c@secnumdepth>\m@ne
        \printactname \printsep \printactnum
    \fi
        \printacttitle{#1}
    \afteract}
}
\newcommand\@openscene{%
    \stepcounter{scene}
    \if@lnps
        \setcounter{storelineno}{0}
        \if@poemscol
            \setcounter{storeprintlineindex}{0}
        \else
            \refstepcounter{storelineno}
        \fi
    \fi
}
\newcommand\scene{%
    \@openscene
    \secdef\@scene\@sscene}
\newcommand\@scene[1][]{%
    \phantomsection
    \addcontentsline{toc}{section}{\scenename\ \thescene}
    \scenemark{\scenename\ \thescene}
    \m@kescenehead{#1}
    \@afterindentfalse
    \@afterheading}
\newcommand\@sscene[1][]{%
    \m@kescenehead{#1}
    \@afterindentfalse
    \@afterheading}
\newcommand\Scene{%
    \@openscene
    \secdef\@Scene\@sscene}
\def\@Scene[#1]#2{%
    \phantomsection
    \ifnum\c@secnumdepth>\z@
        \addcontentsline{toc}{section}{\scenename\ \thescene\ #1}
    \else
        \addcontentsline{toc}{section}{#1}
    \fi
    \scenemark{\scenename\ \thescene\ #1}
    \m@kescenehead{#2}
    \@afterindentfalse
    \@afterheading}
\newcommand\m@kescenehead[1]{%
    \sceneheadstart
    {\parindent \z@
    \ifnum\c@secnumdepth>\z@
        \printscenename \printsep \printscenenum
    \fi
    \printscenetitle{#1}
    \afterscene}
}
\newcommand\Character{%
    \@ifnextchar[{\@xcharacter}{\@character}}
\def\@xcharacter[#1]#2#3{%
    \stepcounter{character}
    \@character{#2}{#3}
    \n@me@ppend@nddef{persona}{@\Roman{character}}{\castfont #1}
}
\def\@character#1#2{%
    \@namedef{#2}{{\namefont #1}\xspace}
    \n@me@ppend@nddef{#2}{\@ppendname}{%
        \if@drverse
            {\speakstab\speaksfont{#1}\speaksdel\par\nobreak\addvspace{-\parskip}}
        \else
            \item[#1\speaksdel]
        \fi}
}
\newcommand{\n@me@ppend@nddef}[2]{%
    \expandafter\def\csname#1#2\endcsname}
\newcommand{\@ppendname}{speaks}
\newenvironment{CharacterGroup}[1]{%
    \stepcounter{character}
    \newcounter{g\Roman{character}}
        \grouplist{#1}
}{}
\newsavebox{\tbox}
\newcommand\grouplist[1]{%
    \global\n@me@ppend@nddef{persona}{@\Roman{character}}{%
    \begin{lrbox}{\tbox}
        \begin{minipage}[c]{\CharWidth}\raggedright
        \leftmargini=0pt
        \begin{list}{}{\itemsep=0pt}
            \dogrouplist
        \end{list}
        \end{minipage}
    \end{lrbox}
    \parbox{\CharWidth}{\usebox{\tbox}}%
    \parbox{\ParenWidth}{$\left.\rule{0pt}{\ht\tbox}\right\}$}
    \parbox{\CastWidth}{\castfont #1\strut}}
}
\newcommand{\dogrouplist}{%
    \ifnum\value{g\Roman{temp}}>\value{gtemp}
        \stepcounter{gtemp}
        \item\@nameuse{gpersona@\Roman{temp}@\Roman{gtemp}}\strut
        \dogrouplist
    \fi
    \setcounter{gtemp}{0}
}
\newcommand\GCharacter[3]{
    \stepcounter{g\Roman{character}}
    \global\@namedef{#3}{{\namefont #2}\xspace}
    \global\n@me@ppend@nddef{#3}{\@ppendname}{%
        \if@drverse
            {\speakstab\speaksfont #2\speaksdel\par\nobreak\addvspace{-\parskip}}
        \else
            \item[#2\speaksdel]
        \fi}
    \global\n@me@ppend@nddef{gpersona@\Roman{character}}{%
        @\Roman{g\Roman{character}}}{\castfont #1}
}
\newcommand\speaker[1]{%
    \if@drverse
        {\speakstab\speaksfont #1\speaksdel\par\nobreak\addvspace{-\parskip}}
    \else
        \item[#1\speaksdel]
    \fi}
\newcommand{\DramPer}{%
    \@ifundefined{if@openright}{\clearpage}{%
        \if@openright\cleardoublepage\else\clearpage\fi}
    \secdef\@dramper\@sdramper}
\newcommand\@dramper[1][]{%
    \phantomsection
    \addcontentsline{toc}{chapter}{\casttitlename}
    \drampermark{\casttitlename}
    \m@kedramperhead{#1}}
\newcommand\@sdramper[1][]{%
    \m@kedramperhead{#1}}
\newcommand\m@kedramperhead[1]{
    \castheadstart
    {\printcasttitle #1
    \aftercasttitle}
    \begin{list}{}{\leftmargin=0pt \itemsep=0pt}
    \dodramperlist
    \end{list}
}
\newcommand{\dodramperlist}{%
    \ifnum\value{character}>\value{temp}
        \stepcounter{temp}
        \item\@nameuse{persona@\Roman{temp}}\strut
        \dodramperlist
    \fi
}
\newcommand{\direct}{%
    \@ifstar\@sdirect\@direct}
\newcommand{\@direct}[1]{%
    \if@drverse
        \vskip2\normallineskip
        \parbox[b]{\dirwidth}{\dirdelimiter{{\itshape #1}}}\@centercr
    \else
        \dirdelimiter{{\itshape #1}}\unskip
    \fi
}
\newcommand{\@sdirect}[1]{%
    \if@drverse
        \vskip2\normallineskip
        \parbox[b]{\dirwidth}{\dirdelimiter{\itshape #1}}\\!
    \else
        \starrederror
    \fi
}
\newcommand{\dirdelimiter}[1]{(#1)}
\newcommand{\StageDir}[1]{%
    \begin{stagedir}
    #1
    \end{stagedir}
}
\newenvironment{stagedir}{%
    \StageDirOpenSettings}{%
    \StageDirCloseSettings\global\@stagedirtrue}
\newcommand\StageDirOpenSettings{\begin{quote}\em}
\newcommand\StageDirCloseSettings{\end{quote}}
\newcommand\StageDirConf[2]{%
    \renewcommand\StageDirOpenSettings{#1}
    \renewcommand\StageDirCloseSettings{#2}
}
\newcommand\actcontentsline[1]{\actname\ \theact}
\newcommand{\actnamefont}{\scshape\Large}
\newcommand{\actnumfont}{\actnamefont}
\newcommand{\acttitlefont}{\actnamefont}
\newcommand{\actname}{Act}
\newcommand{\printactname}{\centering\actnamefont \actname}
\newcommand{\printactnum}{\actnumfont \theact}
\newcommand{\printacttitle}[1]{\acttitlefont\ #1}
\newcommand\scenecontentsline[1]{\scenename\ \thescene}
\newcommand{\scenenamefont}{\scshape\large}
\newcommand{\scenenumfont}{\scenenamefont}
\newcommand{\scenetitlefont}{\scenenamefont}
\newcommand{\scenename}{Scene}
\newcommand{\printscenename}{\centering\scenenamefont \scenename}
\newcommand{\printscenenum}{\scenenumfont \theact\intersep\thescene}
\newcommand{\printscenetitle}[1]{\scenetitlefont\ #1}
\newcommand{\intersep}{\ --\ }
\newcommand{\printsep}{\ }
\newcommand{\printcasttitle}{\centering\casttitlefont \casttitlename}
\newcommand{\casttitlefont}{\Large\scshape}
\newcommand{\casttitlename}{Dramatis Person\ae}
\newcommand{\castfont}{\normalfont}
\newcommand{\namefont}{\scshape}
\newcommand{\speaksfont}{\scshape}
\newcommand{\speaksdel}{}
\newlength{\CharWidth}
\setlength{\CharWidth}{.3\textwidth}
\newlength{\ParenWidth}
\setlength{\ParenWidth}{.05\textwidth}
\newlength{\CastWidth}
\setlength{\CastWidth}{.6\textwidth}
\def\actheadstart{\vspace*{\beforeactskip}}
\def\afteract{\par\nobreak\vskip\afteractskip}
\def\sceneheadstart{\vspace*{\beforesceneskip}}
\def\afterscene{\par\nobreak\vskip\aftersceneskip}
\def\castheadstart{\vspace*{\beforecastskip}}
\def\aftercasttitle{\par\nobreak\vskip\aftercasttitleskip}
\newcommand{\speakstab}{\hspace{\speaksskip}}
\newlength{\beforeactskip}
\setlength{\beforeactskip}{\baselineskip}
\newlength{\afteractskip}
\setlength{\afteractskip}{\baselineskip}
\newlength{\beforesceneskip}
\setlength{\beforesceneskip}{0pt}
\newlength{\aftersceneskip}
\setlength{\aftersceneskip}{\baselineskip}
\newlength{\beforecastskip}
\setlength{\beforecastskip}{0pt}
\newlength{\aftercasttitleskip}
\setlength{\aftercasttitleskip}{0pt}
\newlength{\speaksskip}
\setlength{\speaksskip}{1em}
\newlength{\dirwidth}
\setlength{\dirwidth}{.6\textwidth}
\newdimen\speakswidth
\speakswidth\z@
\newdimen\speaksindent
\speaksindent=-\leftmargin
\newdimen\speechskip
\speechskip\itemsep
\newdimen\Dparsep
\Dparsep\z@
\newdimen\Dlabelsep
\Dlabelsep\labelsep
\newcommand{\speakslabel}[1]{%
    \hspace\labelsep \speaksfont{#1}}
\newcommand{\starrederror}{\PackageError{dramatist}{%
    The starred version of this command is not available under the
    option you have chosen}
    {You probably misspelled the command.^^J%
    Only the `verse' option supports a starred version of this
    command.}
}
\newcommand{\lnpwarning}[1]{The option `lnp#1' is meaningless outside the%
                            `drama*' environment}
\newcommand{\inputfilewarning}{\PackageWarningNoLine{dramatist}{^^J^^J%
********************************************************^^J%
* No Configuration file found, using default settings. *^^J%
********************************************************^^J%
}}
\newcommand{\foundfile}{\PackageWarningNoLine{dramatist}{^^J^^J%
*******************************************^^J%
* Using Configuration file dramatist.cfg. *^^J%
*******************************************^^J%
}}
\InputIfFileExists{dramatist.cfg}{\foundfile}{\inputfilewarning}
\endinput
%</compatibility>
%    \end{macrocode}
% \Finale
